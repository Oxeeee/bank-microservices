services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeperdata:/bitnami/zookeeper
    networks:
      - fingo

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafkadata:/bitnami/kafka
    networks:
      - fingo

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: fingo123
      POSTGRES_DB: postgres
    ports:
      - "5434:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - fingo

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    networks:
      - fingo

  notifications:
    build: ./notifications
    container_name: notifications
    depends_on:
      - kafka
    networks:
      - fingo
    ports:
      - "8080:8080"
  # microservice1:
  #   build: ./microservice1
  #   container_name: microservice1
  #   depends_on:
  #     - kafka
  #     - postgres
  #     - redis
  #   networks:
  #     - fingo

  # microservice2:
  #   build: ./microservice2
  #   container_name: microservice2
  #   depends_on:
  #     - kafka
  #     - postgres
  #     - redis
  #   networks:
  #     - fingo

networks:
  fingo:
    driver: bridge

volumes:
  pgdata:
  redisdata:
  zookeeperdata:
  kafkadata:
